{"version":3,"file":"main.js","sources":["graphs/fullcount.js","graphs/fullCountWeek.js","graphs/fullCountToday.js","graphs/chattyUsers.js"],"names":[],"mappings":"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","sourcesContent":["define('graphs/fullcount',[],function() {\r\n\r\n\tvar margin = {top: 10, right: 10, bottom: 100, left: 100},\r\n    width  = 960 - margin.left - margin.right,\r\n    height = 500 - margin.top - margin.bottom;\r\n\r\n\tvar parseDate = d3.time.format(\"%a, %d %b %Y %H:%M:%S %Z\").parse;\r\n\r\n\tvar x = d3.time.scale().range([0, width]),\r\n\t    y = d3.scale.linear().range([height, 0]);\r\n\r\n\tvar xAxis = d3.svg.axis().scale(x).orient(\"bottom\"),\r\n\t    yAxis = d3.svg.axis().scale(y).orient(\"left\");\r\n\r\n\tvar brush = d3.svg.brush().on(\"brush\", brushed);\r\n\r\n\tvar area = d3.svg.area()\r\n\t    .interpolate(\"monotone\")\r\n\t    .x(function(d) { return x(d.timestamp); })\r\n\t    .y0(height)\r\n\t    .y1(function(d) { return y(d.count); });\r\n\r\n\tvar svg = d3.select(\".fullCount\").append(\"svg\")\r\n\t    .attr(\"width\", width + margin.left + margin.right)\r\n\t    .attr(\"height\", height + margin.top + margin.bottom);\r\n\r\n\tsvg.append(\"defs\").append(\"clipPath\")\r\n\t    .attr(\"id\", \"clip\")\r\n\t    .append(\"rect\")\r\n\t    .attr(\"width\", width)\r\n\t    .attr(\"height\", height);\r\n\r\n\tvar focus = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n\td3.json('getfullusercount', function (data) {\r\n\t    data.forEach(function(d) {\r\n\t      d.timestamp = parseDate(d.timestamp);\r\n\t    });\r\n\r\n\t  x.domain(d3.extent(data.map(function(d) { return d.timestamp; })));\r\n\t  y.domain([0, d3.max(data.map(function(d) { return d.count; }))]);\r\n\r\n\t  focus.append(\"path\")\r\n\t       .datum(data)\r\n\t       .attr(\"clip-path\", \"url(#clip)\")\r\n\t       .attr(\"d\", area);\r\n\r\n\t  focus.append(\"g\")\r\n\t       .attr(\"class\", \"x axis\")\r\n\t       .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n\t       .call(xAxis);\r\n\r\n\t  focus.append(\"g\")\r\n\t       .attr(\"class\", \"y axis\")\r\n\t       .call(yAxis);\r\n\t});\r\n\r\n  \tfunction brushed() {\r\n\t    x.domain(brush.empty() ? x2.domain() : brush.extent());\r\n\t    focus.select(\"path\").attr(\"d\", area);\r\n\t    focus.select(\".x.axis\").call(xAxis);\r\n \t}\r\n});\n","define('graphs/fullCountWeek',[],function() {\r\n\r\n\tvar margin = {top: 10, right: 10, bottom: 100, left: 100},\r\n    width  = 960 - margin.left - margin.right,\r\n    height = 500 - margin.top - margin.bottom;\r\n\r\n\tvar parseDate = d3.time.format(\"%a, %d %b %Y %H:%M:%S %Z\").parse;\r\n\r\n\tvar x = d3.time.scale().range([0, width]),\r\n\t    y = d3.scale.linear().range([height, 0]);\r\n\r\n\tvar xAxis = d3.svg.axis().scale(x).orient(\"bottom\"),\r\n\t    yAxis = d3.svg.axis().scale(y).orient(\"left\");\r\n\r\n\tvar brush = d3.svg.brush().on(\"brush\", brushed);\r\n\r\n\tvar area = d3.svg.area()\r\n\t    .interpolate(\"monotone\")\r\n\t    .x(function(d) { return x(d.timestamp); })\r\n\t    .y0(height)\r\n\t    .y1(function(d) { return y(d.count); });\r\n\r\n\tvar svg = d3.select(\".pastWeekCount\").append(\"svg\")\r\n\t    .attr(\"width\", width + margin.left + margin.right)\r\n\t    .attr(\"height\", height + margin.top + margin.bottom);\r\n\r\n\tsvg.append(\"defs\").append(\"clipPath\")\r\n\t    .attr(\"id\", \"clip\")\r\n\t    .append(\"rect\")\r\n\t    .attr(\"width\", width)\r\n\t    .attr(\"height\", height);\r\n\r\n\tvar focus = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n\td3.json('getfullusercountweek', function (data) {\r\n\t    data.forEach(function(d) {\r\n\t      d.timestamp = parseDate(d.timestamp);\r\n\t    });\r\n\r\n\t  x.domain(d3.extent(data.map(function(d) { return d.timestamp; })));\r\n\t  y.domain([0, d3.max(data.map(function(d) { return d.count; }))]);\r\n\r\n\t  focus.append(\"path\")\r\n\t       .datum(data)\r\n\t       .attr(\"clip-path\", \"url(#clip)\")\r\n\t       .attr(\"d\", area);\r\n\r\n\t  focus.append(\"g\")\r\n\t       .attr(\"class\", \"x axis\")\r\n\t       .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n\t       .call(xAxis);\r\n\r\n\t  focus.append(\"g\")\r\n\t       .attr(\"class\", \"y axis\")\r\n\t       .call(yAxis);\r\n\t});\r\n\r\n  \tfunction brushed() {\r\n\t    x.domain(brush.empty() ? x2.domain() : brush.extent());\r\n\t    focus.select(\"path\").attr(\"d\", area);\r\n\t    focus.select(\".x.axis\").call(xAxis);\r\n \t}\r\n});\n","define('graphs/fullCountToday',[],function() {\r\n\r\n\tvar margin = {top: 10, right: 10, bottom: 100, left: 100},\r\n    width  = 960 - margin.left - margin.right,\r\n    height = 500 - margin.top - margin.bottom;\r\n\r\n\tvar parseDate = d3.time.format(\"%a, %d %b %Y %H:%M:%S %Z\").parse;\r\n\r\n\tvar x = d3.time.scale().range([0, width]),\r\n\t    y = d3.scale.linear().range([height, 0]);\r\n\r\n\tvar xAxis = d3.svg.axis().scale(x).orient(\"bottom\"),\r\n\t    yAxis = d3.svg.axis().scale(y).orient(\"left\");\r\n\r\n\tvar brush = d3.svg.brush().on(\"brush\", brushed);\r\n\r\n\tvar area = d3.svg.area()\r\n\t    .interpolate(\"monotone\")\r\n\t    .x(function(d) { return x(d.timestamp); })\r\n\t    .y0(height)\r\n\t    .y1(function(d) { return y(d.count); });\r\n\r\n\tvar svg = d3.select(\".pastDayCount\").append(\"svg\")\r\n\t    .attr(\"width\", width + margin.left + margin.right)\r\n\t    .attr(\"height\", height + margin.top + margin.bottom);\r\n\r\n\tsvg.append(\"defs\").append(\"clipPath\")\r\n\t    .attr(\"id\", \"clip\")\r\n\t    .append(\"rect\")\r\n\t    .attr(\"width\", width)\r\n\t    .attr(\"height\", height);\r\n\r\n\tvar focus = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n\td3.json('getfullusercounttoday', function (data) {\r\n\t    data.forEach(function(d) {\r\n\t      d.timestamp = parseDate(d.timestamp);\r\n\t    });\r\n\r\n\t  x.domain(d3.extent(data.map(function(d) { return d.timestamp; })));\r\n\t  y.domain([0, d3.max(data.map(function(d) { return d.count; }))]);\r\n\r\n\t  focus.append(\"path\")\r\n\t       .datum(data)\r\n\t       .attr(\"clip-path\", \"url(#clip)\")\r\n\t       .attr(\"d\", area);\r\n\r\n\t  focus.append(\"g\")\r\n\t       .attr(\"class\", \"x axis\")\r\n\t       .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n\t       .call(xAxis);\r\n\r\n\t  focus.append(\"g\")\r\n\t       .attr(\"class\", \"y axis\")\r\n\t       .call(yAxis);\r\n\t});\r\n\r\n  \tfunction brushed() {\r\n\t    x.domain(brush.empty() ? x2.domain() : brush.extent());\r\n\t    focus.select(\"path\").attr(\"d\", area);\r\n\t    focus.select(\".x.axis\").call(xAxis);\r\n \t}\r\n});\n","define('graphs/chattyUsers',[],function() {\r\n\r\nvar margin = {top: 20, right: 20, bottom: 60, left: 60},\r\n    width = 960 - margin.left - margin.right,\r\n    height = 500 - margin.top - margin.bottom;\r\n\r\nvar formatPercent = d3.format(\".0%\");\r\n\r\nvar x = d3.scale.ordinal()\r\n    .rangeRoundBands([0, width], .1, 1);\r\n\r\nvar y = d3.scale.linear()\r\n    .range([height, 0]);\r\n\r\nvar xAxis = d3.svg.axis()\r\n    .scale(x)\r\n    .orient(\"bottom\");\r\n\r\nvar yAxis = d3.svg.axis()\r\n    .scale(y)\r\n    .orient(\"left\");\r\n\r\nvar svg = d3.select(\".chattyUsers\").append(\"svg\")\r\n    .attr(\"width\", width + margin.left + margin.right)\r\n    .attr(\"height\", height + margin.top + margin.bottom)\r\n  .append(\"g\")\r\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\nd3.json(\"getchattyusers\", function(error, data) {\r\n\r\n\t  data.forEach(function(d) {\r\n\t    d.frequency = +d.frequency;\r\n\t  });\r\n\r\n\t  x.domain(data.map(function(d) { return d.user; }));\r\n\t  y.domain([0, d3.max(data, function(d) { return d.noOfMessages; })]);\r\n\r\n\t  svg.append(\"g\")\r\n\t      .attr(\"class\", \"x axis\")\r\n\t      .attr(\"transform\", \"translate(-10,\" + (height + 30)+ \")\")\r\n\t      .call(xAxis)\r\n\t      .selectAll('text')\r\n\t      \t\t.attr(\"transform\", function(d) {\r\n                \treturn \"rotate(-90)\" \r\n                })\r\n\r\n\t  svg.append(\"g\")\r\n\t      .attr(\"class\", \"y axis\")\r\n\t      .call(yAxis)\r\n\t    .append(\"text\")\r\n\t      .attr(\"transform\", \"rotate(-90)\")\r\n\t      .attr(\"y\", 6)\r\n\t      .attr(\"dy\", \".71em\")\r\n\t      .style(\"text-anchor\", \"end\")\r\n\t      .text(\"No Of Messages\");\r\n\r\n\t  svg.selectAll(\".bar\")\r\n\t      .data(data)\r\n\t    .enter().append(\"rect\")\r\n\t      .attr(\"class\", \"bar\")\r\n\t      .attr(\"x\", function(d) { return x(d.user); })\r\n\t      .attr(\"width\", x.rangeBand())\r\n\t      .attr(\"y\", function(d) { return y(d.noOfMessages); })\r\n\t      .attr(\"height\", function(d) { return height - y(d.noOfMessages); })\r\n\t    .append(\"svg:title\")\r\n\t    \t.text(function(d, i) { return \"Message count is \" + d.noOfMessages; })\r\n\r\n\t  d3.select(\"input\").on(\"change\", change);\r\n\r\n\t  var sortTimeout = setTimeout(function() {\r\n\t    d3.select(\"input\").property(\"checked\", true).each(change);\r\n\t  }, 2000);\r\n\r\n\t  function change() {\r\n\t    clearTimeout(sortTimeout);\r\n\r\n\t    // Copy-on-write since tweens are evaluated after a delay.\r\n\t    var x0 = x.domain(data.sort(this.checked\r\n\t        ? function(a, b) { return b.noOfMessages - a.noOfMessages; }\r\n\t        : function(a, b) { return d3.ascending(a.user, b.user); })\r\n\t        .map(function(d) { return d.user; }))\r\n\t        .copy();\r\n\r\n\t    var transition = svg.transition().duration(750),\r\n\t        delay = function(d, i) { return i * 50; };\r\n\r\n\t    transition.selectAll(\".bar\")\r\n\t        .delay(delay)\r\n\t        .attr(\"x\", function(d) { return x0(d.user); });\r\n\r\n\t    transition.select(\".x.axis\")\r\n\t        .call(xAxis)\r\n\t      .selectAll(\"g\")\r\n\t        .delay(delay);\r\n\t  }\r\n\t});\r\n});\n"]}